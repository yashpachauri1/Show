{"ast":null,"code":"var _jsxFileName = \"C:\\\\react\\\\Task-app\\\\frontend\\\\src\\\\pages\\\\Tasks.js\",\n  _s = $RefreshSig$();\nimport { useLoaderData } from \"react-router-dom\";\nimport TaskList from \"../components/TaskList\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst Tasks = () => {\n  _s();\n  const data = useLoaderData();\n  if (data.isError) {\n    console.log(data.message);\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      children: data.message\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 8,\n      columnNumber: 11\n    }, this);\n  }\n  const tasks = data.events;\n  console.log(data); // this will print the task object\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(TaskList, {\n      tasks: tasks\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 14,\n      columnNumber: 1\n    }, this)\n  }, void 0, false);\n};\n_s(Tasks, \"5thj+e1edPyRpKif1JmVRC6KArE=\", false, function () {\n  return [useLoaderData];\n});\n_c = Tasks;\nexport default Tasks;\nexport async function loader() {\n  const response = await fetch('http://localhost:5000/');\n  if (!response.ok) {\n    return new Response(JSON.stringify({\n      message: 'Could not fetch tasks'\n    }), {\n      status: 500\n    });\n  } else {\n    console.log(response);\n    return response;\n  }\n}\nvar _c;\n$RefreshReg$(_c, \"Tasks\");","map":{"version":3,"names":["useLoaderData","TaskList","jsxDEV","_jsxDEV","Fragment","_Fragment","Tasks","_s","data","isError","console","log","message","children","fileName","_jsxFileName","lineNumber","columnNumber","tasks","events","_c","loader","response","fetch","ok","Response","JSON","stringify","status","$RefreshReg$"],"sources":["C:/react/Task-app/frontend/src/pages/Tasks.js"],"sourcesContent":["import { useLoaderData } from \"react-router-dom\";\r\nimport TaskList from \"../components/TaskList\";\r\nconst Tasks = () =>{\r\nconst data = useLoaderData();\r\n\r\nif(data.isError){\r\n    console.log(data.message)\r\n    return<p>{data.message}</p>\r\n}\r\n\r\nconst tasks = data.events\r\nconsole.log(data) // this will print the task object\r\nreturn(<>\r\n<TaskList tasks={tasks} />\r\n\r\n</>)\r\n\r\n}\r\n\r\nexport default Tasks;\r\n\r\nexport async function loader()\r\n{\r\n    const response = await fetch('http://localhost:5000/');\r\n\r\n    if (!response.ok) {\r\n        return new Response(JSON.stringify({message:'Could not fetch tasks'}),{status:500});\r\n    } else {\r\n         console.log(response)\r\n        return response;\r\n    }\r\n}"],"mappings":";;AAAA,SAASA,aAAa,QAAQ,kBAAkB;AAChD,OAAOC,QAAQ,MAAM,wBAAwB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAAA,SAAAC,QAAA,IAAAC,SAAA;AAC9C,MAAMC,KAAK,GAAGA,CAAA,KAAK;EAAAC,EAAA;EACnB,MAAMC,IAAI,GAAGR,aAAa,CAAC,CAAC;EAE5B,IAAGQ,IAAI,CAACC,OAAO,EAAC;IACZC,OAAO,CAACC,GAAG,CAACH,IAAI,CAACI,OAAO,CAAC;IACzB,oBAAMT,OAAA;MAAAU,QAAA,EAAIL,IAAI,CAACI;IAAO;MAAAE,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC;EAC/B;EAEA,MAAMC,KAAK,GAAGV,IAAI,CAACW,MAAM;EACzBT,OAAO,CAACC,GAAG,CAACH,IAAI,CAAC,EAAC;EAClB,oBAAOL,OAAA,CAAAE,SAAA;IAAAQ,QAAA,eACPV,OAAA,CAACF,QAAQ;MAACiB,KAAK,EAAEA;IAAM;MAAAJ,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE;EAAC,gBAExB,CAAC;AAEH,CAAC;AAAAV,EAAA,CAfKD,KAAK;EAAA,QACEN,aAAa;AAAA;AAAAoB,EAAA,GADpBd,KAAK;AAiBX,eAAeA,KAAK;AAEpB,OAAO,eAAee,MAAMA,CAAA,EAC5B;EACI,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,wBAAwB,CAAC;EAEtD,IAAI,CAACD,QAAQ,CAACE,EAAE,EAAE;IACd,OAAO,IAAIC,QAAQ,CAACC,IAAI,CAACC,SAAS,CAAC;MAACf,OAAO,EAAC;IAAuB,CAAC,CAAC,EAAC;MAACgB,MAAM,EAAC;IAAG,CAAC,CAAC;EACvF,CAAC,MAAM;IACFlB,OAAO,CAACC,GAAG,CAACW,QAAQ,CAAC;IACtB,OAAOA,QAAQ;EACnB;AACJ;AAAC,IAAAF,EAAA;AAAAS,YAAA,CAAAT,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}