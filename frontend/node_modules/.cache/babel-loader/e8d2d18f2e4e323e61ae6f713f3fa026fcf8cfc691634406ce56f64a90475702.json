{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Details = () => {\n  return /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false);\n};\n_c = Details;\nexport default Details;\nexport async function loader({\n  request,\n  params\n}) {\n  const taskId = params.taskId;\n  const response = await fetch(`http://localhost:5000/${taskId}`);\n  if (!response.ok) {\n    return new Response(JSON.stringify({\n      message: 'Could not fetch events'\n    }), {\n      status: 500\n    });\n  } else {\n    console.log(response);\n    return response;\n  }\n}\nvar _c;\n$RefreshReg$(_c, \"Details\");","map":{"version":3,"names":["Details","_jsxDEV","_Fragment","_c","loader","request","params","taskId","response","fetch","ok","Response","JSON","stringify","message","status","console","log","$RefreshReg$"],"sources":["C:/react/Task-app/frontend/src/pages/Details.js"],"sourcesContent":["const Details = () =>{\r\n    return(\r\n        <>\r\n        \r\n        </>\r\n    )\r\n}\r\n\r\nexport default Details\r\n\r\nexport async function loader({request, params}){\r\n\r\n    const taskId = params.taskId;\r\n\r\n    const response = await fetch(`http://localhost:5000/${taskId}`);\r\n    if (!response.ok) {\r\n        return new Response(JSON.stringify({message:'Could not fetch events'}),{status:500});\r\n    } else {\r\n         console.log(response)\r\n        return response;\r\n    }\r\n}"],"mappings":";;AAAA,MAAMA,OAAO,GAAGA,CAAA,KAAK;EACjB,oBACIC,OAAA,CAAAC,SAAA,mBAEE,CAAC;AAEX,CAAC;AAAAC,EAAA,GANKH,OAAO;AAQb,eAAeA,OAAO;AAEtB,OAAO,eAAeI,MAAMA,CAAC;EAACC,OAAO;EAAEC;AAAM,CAAC,EAAC;EAE3C,MAAMC,MAAM,GAAGD,MAAM,CAACC,MAAM;EAE5B,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAE,yBAAwBF,MAAO,EAAC,CAAC;EAC/D,IAAI,CAACC,QAAQ,CAACE,EAAE,EAAE;IACd,OAAO,IAAIC,QAAQ,CAACC,IAAI,CAACC,SAAS,CAAC;MAACC,OAAO,EAAC;IAAwB,CAAC,CAAC,EAAC;MAACC,MAAM,EAAC;IAAG,CAAC,CAAC;EACxF,CAAC,MAAM;IACFC,OAAO,CAACC,GAAG,CAACT,QAAQ,CAAC;IACtB,OAAOA,QAAQ;EACnB;AACJ;AAAC,IAAAL,EAAA;AAAAe,YAAA,CAAAf,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}