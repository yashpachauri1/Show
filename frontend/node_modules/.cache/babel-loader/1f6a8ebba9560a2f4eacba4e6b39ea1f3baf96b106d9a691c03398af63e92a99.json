{"ast":null,"code":"var _jsxFileName = \"C:\\\\react\\\\Task-app\\\\frontend\\\\src\\\\components\\\\TaskForm.js\",\n  _s = $RefreshSig$();\nimport { Form, redirect, useNavigate, useNavigation, json } from 'react-router-dom';\nimport classes from './TaskForm.module.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst TaskForm = ({\n  task\n}) => {\n  _s();\n  const navigate = useNavigate();\n  const navigation = useNavigation();\n  const isSubmitting = navigation.state === 'submitting';\n  const cancelHandler = () => {\n    navigate('..');\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(Form, {\n      method: \"POST\",\n      className: classes.form,\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"name\",\n          children: \"Name\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 18,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          id: \"name\",\n          name: \"name\",\n          required: true,\n          defaultValue: task ? task.title : ''\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 19,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 17,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"task\",\n          children: \"Task\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 25,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          id: \"task\",\n          type: \"text\",\n          name: \"task\",\n          required: true,\n          defaultValue: task ? task.date : ''\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 26,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 24,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: classes.actions,\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"button\",\n          disabled: isSubmitting,\n          onClick: cancelHandler,\n          children: \"Cancel\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 37,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          disabled: isSubmitting,\n          type: \"submit\",\n          children: isSubmitting ? 'submitting' : 'add'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 40,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 9\n    }, this)\n  }, void 0, false);\n};\n_s(TaskForm, \"t46O4tL2czeJKfW+Yn/E/3J1StE=\", false, function () {\n  return [useNavigate, useNavigation];\n});\n_c = TaskForm;\nexport default TaskForm;\nexport async function action({\n  request,\n  params\n}) {\n  const data = await request.formData();\n  const taskData = {\n    name: data.get('name'),\n    task: data.get('task')\n  };\n  const response = await fetch('http://localhost:5000/e', {\n    method: 'POST',\n    body: JSON.stringify(taskData),\n    headers: {\n      \"Content-Type\": \"application/json\"\n    }\n  });\n  if (!response.ok) {\n    throw json({\n      message: 'Could not save task'\n    }, {\n      status: 500\n    });\n  } else {\n    return redirect('/tasks');\n  }\n}\nvar _c;\n$RefreshReg$(_c, \"TaskForm\");","map":{"version":3,"names":["Form","redirect","useNavigate","useNavigation","json","classes","jsxDEV","_jsxDEV","Fragment","_Fragment","TaskForm","task","_s","navigate","navigation","isSubmitting","state","cancelHandler","children","method","className","form","htmlFor","fileName","_jsxFileName","lineNumber","columnNumber","type","id","name","required","defaultValue","title","date","actions","disabled","onClick","_c","action","request","params","data","formData","taskData","get","response","fetch","body","JSON","stringify","headers","ok","message","status","$RefreshReg$"],"sources":["C:/react/Task-app/frontend/src/components/TaskForm.js"],"sourcesContent":["import { Form, redirect, useNavigate, useNavigation,json } from 'react-router-dom';\r\nimport classes from './TaskForm.module.css'\r\n\r\nconst TaskForm = ({task}) => {\r\nconst navigate = useNavigate();\r\nconst navigation = useNavigation();\r\n\r\nconst isSubmitting = navigation.state === 'submitting';\r\n\r\nconst cancelHandler = () =>{\r\n      navigate('..');\r\n}\r\n    return (\r\n        \r\n       <>\r\n        <Form method='POST' className={classes.form}>\r\n            <p>\r\n                <label htmlFor=\"name\">Name</label>\r\n                <input type='text' id='name' name='name'\r\n                    required\r\n                    defaultValue={task ? task.title : ''}\r\n                />\r\n            </p>\r\n            <p>\r\n                <label htmlFor=\"task\">Task</label>\r\n                <input\r\n                    id=\"task\"\r\n                    type=\"text\"\r\n                    name=\"task\"\r\n                    required\r\n\r\n                    defaultValue={task ? task.date : ''}\r\n                />\r\n            </p>\r\n\r\n            <div className={classes.actions}>\r\n                <button type=\"button\" disabled={isSubmitting} onClick={cancelHandler}>\r\n                    Cancel\r\n                </button>\r\n                <button disabled={isSubmitting} type=\"submit\" >\r\n                    {isSubmitting ? 'submitting' : 'add'}\r\n                </button>\r\n            </div>\r\n        </Form>\r\n       </>\r\n    )\r\n}\r\n\r\nexport default TaskForm;\r\n\r\nexport async function action({request, params}){\r\nconst data = await request.formData();\r\n\r\nconst taskData={\r\n    name:data.get('name'),\r\n    task:data.get('task')\r\n}\r\n\r\n const response = await fetch('http://localhost:5000/e',{\r\n    method:'POST',\r\n    body:JSON.stringify(taskData),\r\n    headers:{\r\n        \"Content-Type\": \"application/json\"\r\n    }\r\n })   \r\n if(!response.ok){\r\n    throw json({ message: 'Could not save task' }, { status: 500 });\r\n }\r\n else{\r\n    \r\n   return redirect('/tasks');\r\n }\r\n\r\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}