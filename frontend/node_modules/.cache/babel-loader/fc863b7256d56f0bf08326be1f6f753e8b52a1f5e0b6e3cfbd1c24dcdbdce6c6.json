{"ast":null,"code":"var _jsxFileName = \"C:\\\\react\\\\Task-app\\\\frontend\\\\src\\\\pages\\\\Tasks.js\",\n  _s = $RefreshSig$();\nimport { json, useLoaderData } from \"react-router-dom\";\nimport TaskList from \"../components/TaskList\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst Tasks = () => {\n  _s();\n  const tasks = useLoaderData();\n  if (data.isError) {\n    console.log(data.message);\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      children: data.message\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 9,\n      columnNumber: 15\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(TaskList, {\n      tasks: tasks\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 14,\n      columnNumber: 9\n    }, this)\n  }, void 0, false);\n};\n_s(Tasks, \"vnWBCFrZ+g1uJOr2+5KE27SVsrs=\", false, function () {\n  return [useLoaderData];\n});\n_c = Tasks;\nexport default Tasks;\nexport async function loader() {\n  const response = await fetch('http://localhost:5000/e');\n  if (!response.ok) {\n    // return { isError: true, message: 'Could not fetch events.' };\n    // throw new Response(JSON.stringify({ message: 'Could not fetch events.' }), {\n    //   status: 500,\n    // });\n    throw json({\n      message: 'Could not fetch events.'\n    }, {\n      status: 500\n    });\n  } else {\n    const resData = await response.json();\n    return resData.events;\n  }\n}\nvar _c;\n$RefreshReg$(_c, \"Tasks\");","map":{"version":3,"names":["json","useLoaderData","TaskList","jsxDEV","_jsxDEV","Fragment","_Fragment","Tasks","_s","tasks","data","isError","console","log","message","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","loader","response","fetch","ok","status","resData","events","$RefreshReg$"],"sources":["C:/react/Task-app/frontend/src/pages/Tasks.js"],"sourcesContent":["import { json, useLoaderData } from \"react-router-dom\";\r\nimport TaskList from \"../components/TaskList\";\r\n\r\nconst Tasks = () => {\r\n    const tasks = useLoaderData();\r\n\r\n    if(data.isError){\r\n        console.log(data.message)\r\n        return<p>{data.message}</p>\r\n    }\r\n\r\n    \r\n    return (<>\r\n        <TaskList tasks={tasks} />\r\n\r\n    </>)\r\n\r\n}\r\n\r\nexport default Tasks;\r\n\r\nexport async function loader() {\r\n    const response = await fetch('http://localhost:5000/e');\r\n\r\n    if (!response.ok) {\r\n        // return { isError: true, message: 'Could not fetch events.' };\r\n        // throw new Response(JSON.stringify({ message: 'Could not fetch events.' }), {\r\n        //   status: 500,\r\n        // });\r\n        throw json(\r\n          { message: 'Could not fetch events.' },\r\n          {\r\n            status: 500,\r\n          }\r\n        );\r\n      } else {\r\n        const resData = await response.json();\r\n        return resData.events;\r\n      }\r\n}"],"mappings":";;AAAA,SAASA,IAAI,EAAEC,aAAa,QAAQ,kBAAkB;AACtD,OAAOC,QAAQ,MAAM,wBAAwB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAAA,SAAAC,QAAA,IAAAC,SAAA;AAE9C,MAAMC,KAAK,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAChB,MAAMC,KAAK,GAAGR,aAAa,CAAC,CAAC;EAE7B,IAAGS,IAAI,CAACC,OAAO,EAAC;IACZC,OAAO,CAACC,GAAG,CAACH,IAAI,CAACI,OAAO,CAAC;IACzB,oBAAMV,OAAA;MAAAW,QAAA,EAAIL,IAAI,CAACI;IAAO;MAAAE,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC;EAC/B;EAGA,oBAAQf,OAAA,CAAAE,SAAA;IAAAS,QAAA,eACJX,OAAA,CAACF,QAAQ;MAACO,KAAK,EAAEA;IAAM;MAAAO,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE;EAAC,gBAE5B,CAAC;AAEP,CAAC;AAAAX,EAAA,CAdKD,KAAK;EAAA,QACON,aAAa;AAAA;AAAAmB,EAAA,GADzBb,KAAK;AAgBX,eAAeA,KAAK;AAEpB,OAAO,eAAec,MAAMA,CAAA,EAAG;EAC3B,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,yBAAyB,CAAC;EAEvD,IAAI,CAACD,QAAQ,CAACE,EAAE,EAAE;IACd;IACA;IACA;IACA;IACA,MAAMxB,IAAI,CACR;MAAEc,OAAO,EAAE;IAA0B,CAAC,EACtC;MACEW,MAAM,EAAE;IACV,CACF,CAAC;EACH,CAAC,MAAM;IACL,MAAMC,OAAO,GAAG,MAAMJ,QAAQ,CAACtB,IAAI,CAAC,CAAC;IACrC,OAAO0B,OAAO,CAACC,MAAM;EACvB;AACN;AAAC,IAAAP,EAAA;AAAAQ,YAAA,CAAAR,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}